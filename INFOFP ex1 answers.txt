1) x = 3 is een variabele declaratie, x == 3 is een evaluation

2)
	sums(0 : 1 : [2,3,4]) = 0 : sums (1 : [2,3,4])
	sums(1 : 2 : [3,4]) = 1 : sums (3 : [3,4])
	sums(3 : 3 : [4]) = 3 : sums (6 : [4])
	sums(6 : 4 : []) = 6 : sums (10 : [])
	sums(10 : []) = 10

	0 : 1   : 3     : 6       : 10
	0 : 0+1 : 0+1+2 : 0+1+2+3 : 0+1+2+3+4

	map thrice(sums [0..4]) == [[0,0,0],[1,1,1],[3,3,3],[6,6,6],[10,10,10]]
	
3) The program doesn't terminate and returns an error

4)
noOfSol :: (RealFloat a) => a -> a -> a -> Int
noOfSol a b c 
  | d == 0 = 1
  | d < 0 = 0
  | d > 0 = 2
  where d = b*b - 4*a*c

5)
pow2 :: Int -> Int
pow2 0 = 1
pow2 n = 2 * pow2(n - 1)

6)
pow :: Int -> Int -> Int
pow 0 y = 0
pow x 0 = 1
pow x y = x * pow(x y - 1)

7)
newPow :: Int -> Int -> Int
newPow x n
  | x == 0 = 0
  | n == 0 = 1
  | even n = pow (pow x (div x 2)) 2
  | otherwise = x * (pow x (n - 1))
  
8)
(2 `pow` 5) `pow` 2
2 * pow 2 4

9)
binarySearch :: Int -> Int -> Int
binarySearch l u
  | l >= u = l
  | mid >= 10 = binarySearch l mid
  | mid < 10 = binarySearch (mid + 1) u
  where mid = div (l + u) 2
  
10) Integral, door div
11) 3 == Num, even == Bool, even 3 == Bool
12) head == a, [1,2,3] == [Num]